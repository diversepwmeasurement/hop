jobs:
  assign:
    if: ${{ !github.event.issue.pull_request }}
    name: Take or close an issue
    permissions:
      issues: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/github-script@v6
      with:
        script: "const body = context.payload.comment.body.replace( /\\r\\n/g, \"\
          \ \" ).replace( /\\n/g, \" \" ).split(' ');\nconsole.log(body);\nfor (let\
          \ i = 0; i < body.length; i++) {\n  const bodyString = body[i].toLowerCase();\n\
          \  if (bodyString == '.take-issue') {\n    console.log(`Assigining issue\
          \ to ${context.payload.comment.user.login}`);\n    github.rest.issues.addAssignees({\n\
          \      issue_number: context.issue.number,\n      owner: context.repo.owner,\n\
          \      repo: context.repo.repo,\n      assignees: [context.payload.comment.user.login]\n\
          \    });\n    github.rest.issues.removeLabel({\n      issue_number: context.issue.number,\n\
          \      owner: context.repo.owner,\n      repo: context.repo.repo,\n    \
          \  name: 'awaiting triage'\n    });\n  } else if (bodyString == '.close-issue')\
          \ {\n    console.log('Closing issue');\n    if (i + 1 < body.length && body[i+1].toLowerCase()\
          \ == 'not_planned') {\n      github.rest.issues.update({\n        issue_number:\
          \ context.issue.number,\n        owner: context.repo.owner,\n        repo:\
          \ context.repo.repo,\n        state: 'closed',\n        state_reason: 'not_planned'\n\
          \      });\n    } else {\n      github.rest.issues.update({\n        issue_number:\
          \ context.issue.number,\n        owner: context.repo.owner,\n        repo:\
          \ context.repo.repo,\n        state: 'closed'\n      });\n    }\n  } else\
          \ if (bodyString == '.reopen-issue') {\n      console.log('Reopening issue');\n\
          \      github.rest.issues.update({\n        issue_number: context.issue.number,\n\
          \        owner: context.repo.owner,\n        repo: context.repo.repo,\n\
          \        state: 'open'\n      });\n  } else if (bodyString == '.set-labels'\
          \ || bodyString == '.add-labels' || bodyString == '.remove-labels') {\n\
          \    console.log('Updating labels');\n    if (i + 1 >= body.length) {\n\
          \      console.log(`Invalid input ${body}`);\n      github.rest.issues.createComment({\n\
          \        issue_number: context.issue.number,\n        owner: context.repo.owner,\n\
          \        repo: context.repo.repo,\n        body: '.<update>-labels command\
          \ detected, but no labels provided.'\n      });\n      return;\n    } else\
          \ {\n      const labelsInRepo = (await github.paginate(github.rest.issues.listLabelsForRepo,\
          \ {\n        owner: context.repo.owner,\n        repo: context.repo.repo,\n\
          \      })).map(l => l.name);\n      let j = i+1;\n      let partsToConsider\
          \ = body[j];\n      while ((partsToConsider.match(/'/g) || []).length %\
          \ 2 == 1) {\n        j++;\n        if (j >= body.length) {\n          console.log(`Invalid\
          \ input ${body}`);\n          github.rest.issues.createComment({\n     \
          \       issue_number: context.issue.number,\n            owner: context.repo.owner,\n\
          \            repo: context.repo.repo,\n            body: '.<update>-labels\
          \ command detected with mismatched set of \\' quotes'\n          });\n \
          \         return;\n        }\n        partsToConsider += ' ' + body[j];\n\
          \      }\n      const labelsToActionOn = partsToConsider.split(',').map(l\
          \ => l.replaceAll('\\'', ''));\n      for (label of labelsToActionOn) {\n\
          \        if (labelsInRepo.indexOf(label) < 0) {\n          console.log(`Invalid\
          \ label ${body}`);\n          github.rest.issues.createComment({\n     \
          \       issue_number: context.issue.number,\n            owner: context.repo.owner,\n\
          \            repo: context.repo.repo,\n            body: `Label ${label}\
          \ cannot be managed because it does not exist in the repo. Please check\
          \ your spelling.`\n          });\n          return;\n        }\n      }\n\
          \n      if (bodyString == '.set-labels') {\n        console.log(`Setting\
          \ labels to ${labelsToActionOn}`);\n        github.rest.issues.setLabels({\n\
          \          issue_number: context.issue.number,\n          owner: context.repo.owner,\n\
          \          repo: context.repo.repo,\n          labels: labelsToActionOn\n\
          \        });\n      } else if (bodyString == '.add-labels') {\n        console.log(`Adding\
          \ labels ${labelsToActionOn}`);\n        github.rest.issues.addLabels({\n\
          \          issue_number: context.issue.number,\n          owner: context.repo.owner,\n\
          \          repo: context.repo.repo,\n          labels: labelsToActionOn\n\
          \        });\n      } else if (bodyString == '.remove-labels') {\n     \
          \   console.log(`Removing labels ${labelsToActionOn}`);\n        // There's\
          \ no true removeLabels command, we'll remove them one by one\n        for\
          \ (const label of labelsToActionOn) {\n          github.rest.issues.removeLabel({\n\
          \            issue_number: context.issue.number,\n            owner: context.repo.owner,\n\
          \            repo: context.repo.repo,\n            name: label\n       \
          \   });\n        }\n      }\n    }\n  }\n}"
name: Assign or close an issue
on:
  repository_dispatch:
    types: trigger-ga___self_assign.yml
